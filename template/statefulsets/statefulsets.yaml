apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ##appName##
  name: ##appName##
  namespace: ##appNamespace##
spec:
  podManagementPolicy: OrderedReady # 管理Pod策略
  replicas: 2   # 副本数量
  revisionHistoryLimit: 2 # 保留历史版本数
  selector:
    matchLabels:
      app: ##appName##
  serviceName: ##appName##
  template:
    metadata:
      labels: # 标签可以随便打，没必要就不做定制多余的标签
        app: ##appName##
        group: ##appNamespace##
        project: ##appProject##
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: ##app.key##
                    operator: In
                    values:
                      - ##appNamespace##
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - ##appName##
                topologyKey: kubernetes.io/hostname
      # 初始化容器
      initContainers:
        - name: ##appName##-migrate
          image: ##appContainerImage##
          imagePullPolicy: Always
          command: ["##command##"]
          volumeMounts:
            - mountPath: ##appMountPath##
              name: ##appMountName##
              readOnly: true
            - mountPath: ##appConfigMapPath##
              name: ##appConfigMapName##
              readOnly: true

      # 应用容器
      containers:
      - args:
        - ##params##
        command:
        - ##command##
        env:  # 环境变量
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        image: ##appImage##
        imagePullPolicy: IfNotPresent # 拉取镜像策略
        name: ##contarnerName##
        ports:
        - containerPort: 80
          name: tcp
          protocol: TCP
        - containerPort: 8080
          name: http
          protocol: TCP
          # 就绪探针
        readinessProbe:
          httpGet:
            scheme: HTTP             # 协议
            path: /                  # 路径
            port: ##appPortHttp##    # 端口
          initialDelaySeconds: 5     # 延迟探测时间(秒)【 在k8s第一次探测前等待秒 】
          periodSeconds: 2           # 执行探测频率(秒) 【 每隔秒执行一次 】
          timeoutSeconds: 1          # 超时时间
          successThreshold: 1        # 健康阀值
          failureThreshold: 3        # 不健康阀值

        # 存活探针
        livenessProbe:
          httpGet:
            scheme: HTTP             # 协议
            path: /                  # 路径
            port: ##appPortHttp##    # 端口
          initialDelaySeconds: 10    # 延迟探测时间(秒) 【 在k8s第一次探测前等待秒 】
          periodSeconds: 10          # 执行探测频率(秒) 【 每隔秒执行一次 】
          timeoutSeconds: 1          # 超时时间
          successThreshold: 1        # 健康阀值
          failureThreshold: 3        # 不健康阀值
        resources:
          limits:
            cpu: ##limitCpu##
            memory: ##limitMemory##
          requests:
            cpu: ##requestCpu##
            memory: ##requestCpu##
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - mountPath: ##appMountPath##
            name: ##appMountName##
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ##harborAuth##
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      # 数据不持久化挂载
      volumes:
      - emptyDir: {}
        name: ##appMountName##
      - name: ##appMountName##
        persistentVolumeClaim:
          claimName: ##pvcName##
  updateStrategy:
    type: RollingUpdate

  # 数据持久化挂载，这种方式会基于默认的storageClasses创建一个新的pv、pvc
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ##appMountName##
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi  # 所需磁盘空间大小
      storageClassName: "nfs-default" # 所使用的storageClass Name
      volumeMode: Filesystem
